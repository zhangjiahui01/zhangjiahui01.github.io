{"meta":{"title":"个人博客","subtitle":"","description":"随便写写","author":"Actor","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Scanner类","slug":"Scanner类","date":"2020-09-05T15:42:32.206Z","updated":"2020-09-05T15:42:32.355Z","comments":true,"path":"2020/09/05/Scanner类/","link":"","permalink":"http://example.com/2020/09/05/Scanner%E7%B1%BB/","excerpt":"","text":"1. Scanner对象创建1Scanner sc = new Scanner(System.in); 2. next()与nextLine()2.1 使用next方法1234567891011121314151617181920212223import java.util.Scanner; public class ScannerDemo &#123; public static void main(String[] args) &#123; Scanner scan = new Scanner(System.in); // 从键盘接收数据 // next方式接收字符串 System.out.println(&quot;next方式接收：&quot;); // 判断是否还有输入 if (scan.hasNext()) &#123; String str1 = scan.next(); System.out.println(&quot;输入的数据为：&quot; + str1); &#125; scan.close(); &#125;&#125;/*output:next方式接收：runoob com输入的数据为：runoob*/ 2.2 使用nextLine()方法1234567891011121314151617181920212223import java.util.Scanner; public class ScannerDemo &#123; public static void main(String[] args) &#123; Scanner scan = new Scanner(System.in); // 从键盘接收数据 // nextLine方式接收字符串 System.out.println(&quot;nextLine方式接收：&quot;); // 判断是否还有输入 if (scan.hasNextLine()) &#123; String str2 = scan.nextLine(); System.out.println(&quot;输入的数据为：&quot; + str2); &#125; scan.close(); &#125;&#125;/*output:nextLine方式接收：runoob com输入的数据为：runoob com*/ 2.3 next()与nextLine()比较 next()： 一定要读取到有效字符后才可以结束输入。 对输入有效字符之前遇到的空白（空格/换行），next() 方法会自动将其去掉。 只有输入有效字符后才将其后面输入的空白（空格/换行）作为分隔符或者结束符。 next() 不能得到带有空格的字符串。 nextLine(): 以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。 可以获得空白（空格/换行）。 3. 先获取整数，再获取字符串3.1原因：在输入数据时，当输入完int型数据后，敲击enter再输入字符串。这时，因为nextInt()只读取了int的数值却没有读取到换行符，所以，next()/nextLine()就会读取换行符返回，即空字符串。 3.2 解决方案一：将所有数据做为String对象获得，然后再根据需要转换数据类型 3.3 解决方案二：在nextInt()后再读取一个nextLine()，且不做任何处理。比如： 1234Scanner sc = new Scanner(System.in);int x = sc.nextInt();sc.nextLine();String s = sc.nextLine();","categories":[],"tags":[]},{"title":"Java 基础","slug":"Java（学习Java核心技术）","date":"2020-09-03T10:37:51.434Z","updated":"2020-09-04T15:58:59.946Z","comments":true,"path":"2020/09/03/Java（学习Java核心技术）/","link":"","permalink":"http://example.com/2020/09/03/Java%EF%BC%88%E5%AD%A6%E4%B9%A0Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%EF%BC%89/","excerpt":"","text":"Java（学习Java核心技术）第一章 Java程序设计概述（简述）1.1 Java特性 简单性：剔除C++很多很少使用、难以理解、易混淆的特性；基本的解释器和类支持小，适用于嵌入式设备； 面向对象 分布式：通过URL打开和访问网络上的对象 健壮性 安全性 体系结构中立 可移植性：数据类型大小固定 解释型 高性能 多线程 动态性 第二章 Java程序设计环境（简述） 安装JDK 配置环境变量 使用Java 第三章 Java的基本程序设计结构3.1 一个简单的Java程序123456public class FirstSample&#123; public static void main(String[] args)&#123; System.out.println(&quot;Hello, World!&quot;); &#125;&#125; 访问修饰符public：控制程序的其他部分对这段代码的访问级别 关键字class：一个加载程序逻辑的容器 类名：命名规则很宽松，标准的命名规范为驼峰命名法，如FirstSample，同时也是文件名，必须保持一致。 main方法:每一个程序都会有一个main方法 {}：表示方法体的开始与结束 .：使用点号（.）调用方法，通用语法为 1object.method(parameters) 注：Java区分大小写 3.2 注释 单行注释//：从//开始到本行行末 多行注释/*……*/ 文档注释/**……*/ 3.3 数据类型 整型 浮点型 char型 boolean型","categories":[],"tags":[]}],"categories":[],"tags":[]}