{"meta":{"title":"个人博客","subtitle":"","description":"随便写写","author":"Actor","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Java 字符串","slug":"Java 字符串","date":"2020-09-05T15:53:45.054Z","updated":"2020-09-05T17:00:16.506Z","comments":true,"path":"2020/09/05/Java 字符串/","link":"","permalink":"http://example.com/2020/09/05/Java%20%E5%AD%97%E7%AC%A6%E4%B8%B2/","excerpt":"","text":"String类1. 数据转换valueOf(int/char/…)1234String str = new String();str = String.valueOf(24);char[] charArray = &#123;&#x27;a&#x27;,&#x27;c&#x27;,&#x27;t&#x27;,&#x27;o&#x27;,&#x27;r&#x27;&#125;;str = String.valueOf(charArray,offset:1,count:3);//从数组下标offset开始取count个数据 2. 字符串拼接 +3. 字符串长度 length()1int len = str.length(); 4. 查找字符串4.1 charAt(int index)方法获取字符串中指定索引位置的字符 4.2 indexOf()方法 indexOf(int ch):返回入参字符在字符串中第一次出现的索引位置 indexOf(int ch,int formIndex):从formIndex开始搜索，返回入参字符在字符串中第一次出现的索引位置 indexOf(String str):返回入参字符串在字符串中第一次出现的索引位置 indexOf(String str,int formIndex)：从formIndex开始搜索，返回入参字符串在字符串中第一次出现的索引位置 4.3 lastIndexOf()方法同indexOf()类似，返回最后一次出现的索引位置，搜索则为反向搜索。 5. 字符串替换replace()6. 字符串截取substring() substring(int beginIndex)：从入参索引位置开始截取，直到String结尾 substring(int beginIndex，int endIndex):从beginIndex到endIndex-1 7. 字符串分割split(String regex)/split(String regex,int)8. 字符串首尾判断 startsWith(String prefix):判断是否以prefix开始 startsWith(String prefix,int offset):判断从offset开始是否以prefix开始 endsWith(String suffix):判断是否以suffix结尾 9. 字符串首尾去空格trim()10. 字符串大小写转换toLowerCase()/toUpperCase11. 其他操作11.1 判断是否包含字符串 cantains(CharSequence s)11.2 转换字符数组 toCharArray()StringBuilder类与StringBuffer类1. 区别StringBuilder是非线程安全的，StringBuffer是线程安全的，但是StringBuilder比StringBuffer效率更高。 2. 创建对象12StringBuilder stringBuiler = new StringBuilder();StringBuffer stringBuffer = new StringBuffer(); 3. append(object)方法将指定内容转换成字符串，添加到StringBuilder/StringBuffer对象末端。 4. insert(int offset,object)方法在索引offset处插入指定内容。 5. delete(int start,int end)方法删除start到end-1的字符内容。 6. charAt(int)方法返回指定索引位置的字符。 7. replace(int start,int end,String str)方法8. reverse()方法将字符串序列反转，创造一个新的StringBuilder/StringBuffer对象。 1234StringBuilder stringBuiler = new StringBuilder();StringBuffer stringBuffer = new StringBuffer();stringBuiler.reverse();stringBuffer.reverse(); 9. toString()方法","categories":[],"tags":[]},{"title":"Scanner类","slug":"Scanner类","date":"2020-09-05T15:42:32.206Z","updated":"2020-09-05T15:54:51.021Z","comments":true,"path":"2020/09/05/Scanner类/","link":"","permalink":"http://example.com/2020/09/05/Scanner%E7%B1%BB/","excerpt":"","text":"Scanner对象创建1Scanner sc = new Scanner(System.in); next()与nextLine()1 使用next方法1234567891011121314151617181920212223import java.util.Scanner; public class ScannerDemo &#123; public static void main(String[] args) &#123; Scanner scan = new Scanner(System.in); // 从键盘接收数据 // next方式接收字符串 System.out.println(&quot;next方式接收：&quot;); // 判断是否还有输入 if (scan.hasNext()) &#123; String str1 = scan.next(); System.out.println(&quot;输入的数据为：&quot; + str1); &#125; scan.close(); &#125;&#125;/*output:next方式接收：runoob com输入的数据为：runoob*/ 2 使用nextLine()方法1234567891011121314151617181920212223import java.util.Scanner; public class ScannerDemo &#123; public static void main(String[] args) &#123; Scanner scan = new Scanner(System.in); // 从键盘接收数据 // nextLine方式接收字符串 System.out.println(&quot;nextLine方式接收：&quot;); // 判断是否还有输入 if (scan.hasNextLine()) &#123; String str2 = scan.nextLine(); System.out.println(&quot;输入的数据为：&quot; + str2); &#125; scan.close(); &#125;&#125;/*output:nextLine方式接收：runoob com输入的数据为：runoob com*/ 3 next()与nextLine()比较 next()： 一定要读取到有效字符后才可以结束输入。 对输入有效字符之前遇到的空白（空格/换行），next() 方法会自动将其去掉。 只有输入有效字符后才将其后面输入的空白（空格/换行）作为分隔符或者结束符。 next() 不能得到带有空格的字符串。 nextLine(): 以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。 可以获得空白（空格/换行）。 先获取整数，再获取字符串1 原因：在输入数据时，当输入完int型数据后，敲击enter再输入字符串。这时，因为nextInt()只读取了int的数值却没有读取到换行符，所以，next()/nextLine()就会读取换行符返回，即空字符串。 2 解决方案一：将所有数据做为String对象获得，然后再根据需要转换数据类型 3 解决方案二：在nextInt()后再读取一个nextLine()，且不做任何处理。比如： 1234Scanner sc = new Scanner(System.in);int x = sc.nextInt();sc.nextLine();String s = sc.nextLine();","categories":[],"tags":[]},{"title":"Java 基础","slug":"Java 基础","date":"2020-09-03T10:37:51.434Z","updated":"2020-09-05T15:51:19.841Z","comments":true,"path":"2020/09/03/Java 基础/","link":"","permalink":"http://example.com/2020/09/03/Java%20%E5%9F%BA%E7%A1%80/","excerpt":"","text":"Java 基础第一章 Java程序设计概述（简述）1.1 Java特性 简单性：剔除C++很多很少使用、难以理解、易混淆的特性；基本的解释器和类支持小，适用于嵌入式设备； 面向对象 分布式：通过URL打开和访问网络上的对象 健壮性 安全性 体系结构中立 可移植性：数据类型大小固定 解释型 高性能 多线程 动态性 第二章 Java程序设计环境（简述） 安装JDK 配置环境变量 使用Java 第三章 Java的基本程序设计结构3.1 一个简单的Java程序123456public class FirstSample&#123; public static void main(String[] args)&#123; System.out.println(&quot;Hello, World!&quot;); &#125;&#125; 访问修饰符public：控制程序的其他部分对这段代码的访问级别 关键字class：一个加载程序逻辑的容器 类名：命名规则很宽松，标准的命名规范为驼峰命名法，如FirstSample，同时也是文件名，必须保持一致。 main方法:每一个程序都会有一个main方法 {}：表示方法体的开始与结束 .：使用点号（.）调用方法，通用语法为 1object.method(parameters) 注：Java区分大小写 3.2 注释 单行注释//：从//开始到本行行末 多行注释/*……*/ 文档注释/**……*/ 3.3 数据类型 整型 浮点型 char型 boolean型","categories":[],"tags":[]}],"categories":[],"tags":[]}